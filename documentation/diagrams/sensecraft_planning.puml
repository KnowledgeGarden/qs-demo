@startuml sensecraft_planning

  enum NodeType {
    Issue
    Proposal
    Pro
    Con
    Reference
  }

enum MarkerType {
  token
  flag
  evaluation
  tag
  comment
}

enum TokenAllocationType {
  personal
  playing_guild
  learning_guild
}

  class ScoringCriterion #line.dotted:blue {
    name String
    description Text
    badgeLevels float[]
  }

  class RecordedScores #line.dotted:blue {
    'Could be a view, but a bit costly to compute'
    member Member
    criterion ScoringCriterion
    score float
  }
  Member "1" o--> "*" RecordedScores
  ScoringCriterion "1" <--* RecordedScores

  class Marker #line.dotted:blue {
    id int<ConversationNodeSeq>
    owner Member
    quest Quest
    guild Guild
    'FK to play'
    target ConversationNode
    markerType MarkerTypes
    criterion ScoringCriterion
    computedValue float
    'What when many players contributed to that move?'
    stringValue varchar
    ' Costly... tag ref?'
    state PublicationState 
  }

Marker "*" --> "1" ConversationNode  :> target
Marker "1" -> "*" GamePlay
Marker *--> "1" MarkerType
Marker *--> "0..1" ScoringCriterion :> tag_criterion

  class ScoringAllocation #line.dotted:blue {
    quest Quest
    criterion ScoringCriterion
    per_turn boolean
    allocationType TokenAllocationType
  }

ScoringAllocation --> "*" Marker :> generates_token
ScoringAllocation *--> "1" ScoringCriterion
ScoringAllocation *--> "1" TokenAllocationType
Quest "1" *--> "*" ScoringAllocation

  class AccountService #line.dotted:blue {
    name String
    url String
  }

  enum RegistrationStatus {
    request
    invitation
    confirmed
  }


  enum QuestStatus {
    draft
    registration
    ongoing
    scoring
    finished
  }

  enum GamePlayStatus {
    cancelled
    interested
    confirmed
    team_full
  }

  enum Permissions {
    superadmin
    viewGuild
    viewQuest
    createQuest
    createGuild
    ' Guild permissions'
    acceptGuildMembership
    revokeGuildMembership
    inviteMember
    publishGameMove
    retractGameMove
    joinQuest
    guildAdmin
    - setGameFocus
    ' within term time'
    ' Quest permissions'
    acceptQuestMembership
    revokeQuestMembership
    rejectGameMove
    ' extraCreditForMove may have issues with favoritism'

  }

  ' Note: attach permissions to roles'

  class TurnBoundary #line.dotted:blue {
    quest Quest
    when dateTime
  }

  Quest "1" *-> "*" TurnBoundary

  enum PublicationState {
    obsolete
    private_draft
    guild_draft
    role_draft
    proposed
    ' proposed: the node authors think it's ready''
    submitted
    ' submitted: the guild leaders think it's ready, quest moderators aware of it. ''
    published
    ' published: visible to all.'
    ' published and submitted are the same for v1; eventually we'll allow turn-based visibility ''
    ' flag = private plus quest moderators? '
  }

  enum MetaState {
    conversation
    meta
    channel
  }

  enum NodeActionType #line.dotted:blue {
    add_node
    ' Eventually refactorings'
  }

  class Member {
    ' server ExternalServer'
    handle String
    name String
    email String
    password String
    created_at timestamp
    updated_at timestamp
    permissions Permission[]
  }
  class Account #line.dotted:blue {
    Member member
    service AccountService
    string id
  }
  Account ..> "1" AccountService
  Member "1" ..> "*" Account

  class Guild {
    name String
    handle String
    public boolean
    open_for_applications boolean
    application_needs_approval boolean
    created_at timestamp
    updated_at timestamp
    default_role Role
    ' server ExternalServer '
    accept(GamePlay)
  }
  ' Guild --> "0..1" ExternalServer '
  ' Quest --> "0..1" ExternalServer '
  ' Member --> "0..1" ExternalServer '
  class Quest {
    name String
    description String
    handle String
    creator Member
    public boolean
    status QuestStatus
    created_at timestamp
    updated_at timestamp
    start timestamp
    end timestamp
    ' scoring ScoringStrategy '
    ' server ExternalServer '
    ' scoreMove(ConversationNode): GameMoveScore[] '
    register(Guild): GamePlay
  }
  Quest o--> "1" Member : > creator
  Quest o--> "*" Member : > moderators
  (Quest, Member) .. QuestMembership


  class QuestMembership {
    quest Quest
    member Member
    ' status RegistrationStatus '
    confirmed boolean
    created_at timestamp
    updated_at timestamp
    permissions Permission[]
  }
  Guild o--> "1" Member : > creator
  Guild o--> "*" Member : > members

  (Member , Guild) .. GuildMembership

  class GuildMembership {
    guild Guild
    member Member
    status RegistrationStatus
    permissions Permission[]
    created_at timestamp
    updated_at timestamp
  }

  GuildMembership *--> RegistrationStatus

  'class ExternalServer #line.dotted:blue {'
  '  server_api URL'
  '  name String'
  '}'


  class ConversationNode {
    id integer
    quest Quest
    creator Member
    node_type NodeType
    title String
    description String
    state PublicationState
    meta MetaState
    parent ConversationNode
    created_at timestamp
    published_at timestamp
    draftForRole Role
    ancestry() ConversationNode[]
  }

ConversationNode *--> NodeType
ConversationNode *--> PublicationState
ConversationNode *--> MetaState

ConversationNode --> "?" Role

ConversationNode <|-- ConversationNodeV2

class ConversationNodeV2 #line.dotted:blue {
    node_action_type NodeActionType
    aims_to_replace ConversationNode
    history ConversationNode[]
    obsolete boolean
  }
ConversationNodeV2 *--> "1" NodeActionType
'When a node replaces another, the other node gets obsolete status (not to be confused with pubstate),'
'and the children are redirected to the new node'
'Maybe remove obsolete PubState, only keep the flag. We need obsolete version of each pubstate'

  class NodeReplacement #line.dotted:blue {
    new_node ConversationNode
    replacing_node ConversationNode
    approved_by Casting[]
    effective timestamp
  }

  <> diamond
  NodeReplacement . diamond
  diamond . "new_node 1" ConversationNodeV2
  diamond . "replacing_node 1" ConversationNodeV2

  NodeReplacement ..> "*" Casting : > approvals

  'ConversationNodeV2 "*" o..> "1..*" Casting'
  ' Quest o--> ScoringStrategy'

  Member "1" <-- "*" ConversationNode : < creator
  ConversationNode "1" o-> "0..1" ConversationNode : > parent
  Quest "1" o--> "*" ConversationNode
  Quest *--> QuestStatus

  '  class GameMoveScore #line.dotted:blue {'
  ' guild Guild'
  '  moves ConversationNode[]'
  '  metric Metric'
  '  value float'
  '  strategy ScoringStrategy'
  '  quest_signature crypto'
  '  badge BadgeType'
  '}'

  'ConversationNode "1..*" <.. "*" GameMoveScore'
  'Quest *..> "*" GameMoveScore'

  'class ScoreAssignment #line.dotted:blue {'
  '  from_score GameMoveScore'
  '  casting Casting'
  '  value float'
  '  Should I put all values in one assignment? Easier to check the total constraint.'
  '  badge BadgeType'
  '  guild_signature crypto'
  '}'

  '(Casting, GameMoveScore) .. ScoreAssignment'

  'Member "1" ..> "*" ScoreAssignment'

  ' GameMoveScore --> "1" ScoringStrategy '
  ' NOTE: GameMoveScore given by Quest, distribution of points to contributors is decided by guild'
  ' TODO: Score for a set of related game moves.'
  ' Q: are badges automated based on score? Possibly.'
  ' Are all points given by quest? Cross-guild scoring?'
  ' Maybe pre-announce number of points given by quest? Success criteria?'

  ' Question: Should I allow multiple avatars in a guild, reusable between quests?'
  ' Vs the Casting which is a way to play a game under a quest-specific identity...'
  ' That creates the question: Do the points/badges belong to the Avatar or the Member?'

  class Avatar #line.dotted:blue {
    ' Note: for v1, a single avatar.'
    member Member
    server Server
    badges BadgeType[]
    scores {Metric->float}
    name String
    ' defaults to member's handle'
    ' (server+name unique)'

    ' v2'
    roles Role[]
  }

  Member "1" o..> "*" Avatar

  class Casting {
    ' note: denormalized for uniqueness constraints'
    quest Quest
    member Member
    ' (quest+member unique)'
    guild Guild
    ' Constrain that the member be in playing guild'

    permissions Permission[]

    ' v2:'
    'avatar Avatar'
    ' Constrain avatar having same member'
    ' some permissions would be inherent in avatar's roles'
    'alias String'
    ' alias defaults to avatar handle'
    ' (quest+alias unique)'
  }

  class GamePlay {
    Quest quest
    Guild guild
    status RegistrationStatus
    game_play GamePlayStatus
    created_at timestamp
    accepted timestamp
    guild_focus ConversationNode
    scores {Metric->float}
  }

  GamePlay *--> RegistrationStatus
  GamePlay *--> GamePlayStatus

  (Guild , Quest) .. GamePlay
  (Member, GamePlay) .. Casting

  class Role {
    name String
    guild Guild?
    permissions Permission[]
    max_pub_state PublicationState
    RoleDraftTargetRole Role
  }

  class CastingRole {
    Member member
    Quest quest
    Guild guild
    Role role
  }

  class GuildMemberAvailableRole {
    guild Guild
    member Member
    role Role
  }

  (GuildMembership, Role) .. GuildMemberAvailableRole


  class RoleNodeConstraint {
    role Role
    node_type NodeType
    max_pub_state PublicationState
    role_draft_target_role_id Role
  }

  Role *--> "*" RoleNodeConstraint
  (Casting, Role) .. CastingRole

@enduml
