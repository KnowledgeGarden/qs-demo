@startuml qaas

package Global {

  class ScoringStrategy {
    name String
    evalMove(GameMove): float
    evalQuest(ActiveQuest, ParticipatingGuild): QBadge[]
  }

  class AccountService {
    name String
    url String
  }

  class QuestRegistry {
    quests(status): ActiveQuest[]
  }

  class GuildRegistry {
    guilds(): ParticipatingGuild[]
    scores(ParticipatingGuild): GlobalGuildScores
  }

  class UserRegistry {
    users[]: User[]
    badges(User): UBadge[]
  }

  enum QuestStatus {
    draft
    registration
    ongoing
    scoring
    finished
  }

  enum Permissions {
    superadmin
    viewGuild
    viewQuest
    createQuest
    createGuild
    ' Guild permissions
    acceptGuildMembership
    revokeGuildMembership
    publishGameMove
    retractGameMove
    ' within term time
    ' Quest permissions
    acceptQuestMembership
    revokeQuestMembership
    rejectGameMove
    ' extraCreditForMove may have issues with favoritism
    
  }

  class TurnStrategy {
    synchronous boolean
    turnLength interval
  }

}


package ServerInfo {
  class User {
    handle String
    name String
    email String
    permissions Permission[]
  }
  class Account {
    User user
    service AccountService
    string id
  }
  Account --> "1" AccountService
  User "1" --> "*" Account

  class Guild {
    name String
    admin User
    open_for_applications boolean
    accept(ActiveQuest)
    register_score(GuildScore): QuestScore
  }
  Quest o--> "1" User : > admin
  class Quest {
    name LangString
    description LangString
    scoring ScoringStrategy
    turns TurnStrategy
    status QuestStatus
    admin User
    scoreMove(GameMove): GameMoveScore[]
    play(ProposedGameMove): GameMove
    ' Maybe have a QProposedGameMove in case of non-synchronous turn strategy
    register(ActiveQuest): ParticipatingGuild
    ' will also create the Avatars from the ActiveQuest's castings
  }

  Guild o--> "1" User : > leader
}


package QuestInfo {

  object aQuest {
    name String
  }
  Quest <|-- aQuest

  (User , Quest) .. QuestMembership


  class QuestMembership {
    user User
    boolean confirmed
    permissions Permission[]
  }


  class ParticipatingGuild {
    name String
    server URL
  }

  Quest "1" --> "*" ParticipatingGuild

  class Avatar {
    guild ParticipatingGuild
    handle String
    origin Casting
  }

  ParticipatingGuild "1" --> "*" Avatar

  class GameMove {
    creator Avatar?
    basedOn ProposedGameMove?
    submitted timestamp
    made_visible timestamp
  }

  Quest "1" --> "*" GameMove
  GameMove "1" o--> "0..1" Avatar
  Quest o--> ScoringStrategy
  
  class GameMoveScore {
    value float
    move GameMove
    strategy ScoringStrategy
  }
  GameMove "1" <-- GameMoveScore
  GameMoveScore --> "1" ScoringStrategy
  class GuildScore {
    ParticipatingGuild guild
    total float
    moves GameMoveScore[]
    strategy ScoringStrategy
    signature crypto
  }
  ParticipatingGuild o--> "*" GuildScore
  GuildScore --> "*" GameMoveScore
  GuildScore --> "1" ScoringStrategy


  class QBadge {
    avatar Avatar
    from_score GameMoveScore
    signature crypto
  }

  GameMoveScore "1" *--> "*" QBadge
  Avatar "1" --> "*" QBadge

}


package GuildInfo {

  object aGuild {
    name String
  }
  Guild <|-- aGuild

  ' GuildRegistry --> "*" Guild
  ' GuildRegistry -> "*" GlobalGuildScore

  ' UserRegistry --> "*" User
  ' UserRegistry -> "*" UBadge

  ParticipatingGuild .> "*" Guild
  Guild --> "*" ActiveQuest

  Guild "*" <--> "*" User

  (User , Guild) .. GuildMembership


  class GuildMembership {
    user User
    boolean confirmed
    permissions Permission[]
  }

  class Casting {
    quest ActiveQuest
    user User
    handle avatar
    role Role
  }

  User "1" --> "*" Casting


  Casting "1" <.o "1" Avatar

  ActiveQuest "1" --> "*" QuestScore

  class ActiveQuest {
    name LangString
    status QuestStatus
    server URL
    proposed timestamp
    accepted timestamp
  }

  ActiveQuest o.> "*" Quest

  class QuestScore {
    ActiveQuest quest
    total float
    origin GuildScore
  }


  GuildScore "1" <.o "1" QuestScore


  class UBadge {
    casting Casting
    from QuestScore
    origin QBadge
  }

  UBadge "1" o.> "1" QBadge
  QuestScore "1" --> "*" UBadge

  Casting "1" <--> "*" UBadge

  ActiveQuest "1" --> "*" Casting

  enum PubState {
    proposed
    submitted
    visible
    ' visible and submitted are the same for v1
  }

  class Turn {
    quest ActiveQuest
    state PubState
    created timestamp
    created timestamp
    submitted timestamp
    visible timestamp
  }

  ActiveQuest o--> "*" Turn
  Turn --> "1..*" ProposedGameMove
  Turn --> "1" PubState

  class ProposedGameMove {
    quest ActiveQuest
    turn Turn
    contributors Casting[]
    state PubState
    created timestamp
    submitted timestamp
    visible timestamp
  }
  GameMove "1" o.> "0..1" ProposedGameMove
  ParticipatingGuild "1" <-- "*" ProposedGameMove
  ProposedGameMove "*" --> "1..*" Casting
  ProposedGameMove "*" --> "1" PubState

  class GlobalGuildScore {
    float total
    strategy ScoringStrategy
    scores QuestScore[]
  }

  Guild "1" --> "*" GlobalGuildScore
  GlobalGuildScore --> "1" ScoringStrategy
  GlobalGuildScore --> "*" QuestScore

}


@enduml
