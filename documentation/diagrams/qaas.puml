@startuml qaas

package Global {

  enum ScoringCriterion {
    
  }

  class ScoringStrategy {
    name String
    criterion ScoringCriterion
    evalMove(GameMove): float
    evalQuest(QuestParticipation, ParticipatingGuild): QuestBadge[]
  }

  class AccountService {
    name String
    url String
  }

  class QuestRegistry {
    quests(status): QuestParticipation[]
  }

  class GuildRegistry {
    guilds(): ParticipatingGuild[]
    scores(ParticipatingGuild): GlobalGuildScores
  }

  class UserRegistry {
    users[]: User[]
    badges(User): UserBadge[]
  }

  enum QuestStatus {
    draft
    registration
    ongoing
    scoring
    finished
  }

  enum Permissions {
    superadmin
    viewGuild
    viewQuest
    createQuest
    createGuild
    ' Guild permissions
    acceptGuildMembership
    revokeGuildMembership
    publishGameMove
    retractGameMove
    ' within term time
    ' Quest permissions
    acceptQuestMembership
    revokeQuestMembership
    rejectGameMove
    ' extraCreditForMove may have issues with favoritism
    
  }

  class TurnStrategy {
    synchronous boolean
    turnLength interval
  }

  enum PubState {
    draft
    proposed
    submitted
    visible
    ' visible and submitted are the same for v1
  }

  enum BadgeType {

  }

  enum GameMoveType {
    add_node
    ' Eventually refactorings
  }
}


package ServerInfo {
  class User {
    handle String
    name String
    email String
    password String
    permissions Permission[]
  }
  class Account {
    User user
    service AccountService
    string id
  }
  ' Account --> "1" AccountService
  User "1" --> "*" Account

  class Guild {
    name String
    handle String
    public boolean
    open_for_applications boolean
    accept(QuestParticipation)
    register_score(GuildScore): QuestScore
  }
  Quest o..> "1" User : > admin
  class Quest {
    name String
    description String
    handle String
    public boolean
    scoring ScoringStrategy
    turns TurnStrategy
    status QuestStatus
    scoreMove(GameMove): GameMoveScore[]
    play(ProposedGameMove): GameMove
    ' Maybe have a QProposedGameMove in case of non-synchronous turn strategy
    register(QuestParticipation): ParticipatingGuild
    ' will also create the Avatars from the QuestParticipation's castings
  }

  Guild o--> "1" User : > leader

  (User , Quest) .. QuestMembership


  class QuestMembership {
    quest Quest
    user User
    boolean confirmed
    permissions Permission[]
  }

  (User , Guild) .. GuildMembership

  class GuildMembership { 
    guild Guild
    user User
    boolean confirmed
    boolean leadership
    permissions Permission[]
  }

  class ExternalServer {
    server_api URL
    name String
  }

}


package QuestInfo {

  object aQuest {
    name String
  }
  Quest <|-- aQuest

  class ParticipatingGuild {
    name String
    server ExternalServer
    handle String
  }

  ParticipatingGuild o-> "1" ExternalServer

  Quest "1" --> "*" ParticipatingGuild

  class Avatar {
    guild ParticipatingGuild
    handle String
    origin Casting
  }

  ParticipatingGuild "1" --> "*" Avatar

  class GameMove {
    creator Avatar?
    proposed_node_id ProposedGameMove?
    type GameMoveType
    about_node ConversationNode
    submitted timestamp
    made_visible timestamp
  }

  Quest "1" --> "*" GameMove
  GameMove "1" o--> "0..1" Avatar
  ' Quest o--> ScoringStrategy

  class ConversationNode {
    title String
    description String
    imported_from_guild ParticipatingGuild
    imported_identifier String
    parent ConversationNode
    ancestry() ConversationNode[]
  }

  GameMove o--> "1" ConversationNode
  ParticipatingGuild "1" <-- "*" ConversationNode
  ConversationNode "*" -> "1" ConversationNode : > parent

  class GameMoveScore {
    value float
    move GameMove
    strategy ScoringStrategy
  }
  GameMove "1" <-- GameMoveScore
  ' GameMoveScore --> "1" ScoringStrategy
  class GuildScore {
    ParticipatingGuild guild
    total float
    moves GameMoveScore[]
    strategy ScoringStrategy
    signature crypto
  }
  ParticipatingGuild o--> "*" GuildScore
  GuildScore --> "*" GameMoveScore
  ' GuildScore --> "1" ScoringStrategy


  class QuestBadge {
    avatar Avatar
    for_moves GameMoveScore[]
    signature crypto
  }

  GameMoveScore "1" *--> "*" QuestBadge
  Avatar "1" --> "*" QuestBadge

}


package GuildInfo {

  object aGuild {
    name String
  }
  Guild <|-- aGuild

  ' GuildRegistry --> "*" Guild
  ' GuildRegistry -> "*" GlobalGuildScore

  ' UserRegistry --> "*" User
  ' UserRegistry -> "*" UserBadge

  ParticipatingGuild .> "*" Guild
  Guild --> "*" QuestParticipation

  Guild "*" <--> "*" User

  class Casting {
    quest QuestParticipation
    user User
    handle avatar
    role Role
  }

  User "1" --> "*" Casting


  Casting "1" <.o "1" Avatar

  QuestParticipation "1" --> "*" QuestScore

  class QuestParticipation {
    name String
    status QuestStatus
    server URL
    proposed timestamp
    accepted timestamp
  }

  QuestParticipation o.> "*" Quest

  class QuestScore {
    QuestParticipation quest
    total float
    origin GuildScore
  }


  GuildScore "1" <.o "1" QuestScore


  class UserBadge {
    casting Casting
    from QuestScore
    origin QuestBadge
  }

  UserBadge "1" o.> "1" QuestBadge
  QuestScore "1" --> "*" UserBadge

  Casting "1" <--> "*" UserBadge

  QuestParticipation "1" --> "*" Casting

  class Turn {
    quest QuestParticipation
    state PubState
    created timestamp
    proposed timestamp
    submitted timestamp
    visible timestamp
  }

  QuestParticipation o--> "*" Turn
  Turn --> "1..*" ProposedGameMove

  class ProposedGameMove {
    quest QuestParticipation
    turn Turn
    type GameMoveType
    contributors Casting[]
    state PubState
    about_node ProposedConversationNode
    created timestamp
    submitted timestamp
    visible timestamp
  }
  GameMove "1" o.> "0..1" ProposedGameMove
  ParticipatingGuild "1" <-- "*" ProposedGameMove
  ProposedGameMove "*" --> "1..*" Casting

  class ProposedConversationNode {
    title String
    description String
    quest_identifier String
    parent ProposedConversationNode
    ancestry() ProposedConversationNode[]
  }

  ConversationNode "1" o.> "0..1" ProposedConversationNode
  ProposedGameMove o--> "1" ProposedConversationNode
  QuestParticipation "1" <-- "*" ProposedConversationNode
  ProposedConversationNode "*" -> "1" ProposedConversationNode : > parent

  class GlobalGuildScore {
    float total
    strategy ScoringStrategy
    scores QuestScore[]
  }

  Guild "1" --> "*" GlobalGuildScore
  ' GlobalGuildScore --> "1" ScoringStrategy
  GlobalGuildScore --> "*" QuestScore

}


@enduml
